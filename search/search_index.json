{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Buildmeister_process/","title":"Buildmeister process","text":"<ul> <li>General</li> <li>Notification system</li> <li>Buildmeister instructions<ul> <li><code>update_amp_submodule</code> fails</li> </ul> </li> <li>Post-mortem analysis (TBD)</li> </ul>"},{"location":"Buildmeister_process/#general","title":"General","text":"<ul> <li>Buildmeister rotates every 2 weeks</li> <li>To see who is the Buildmeister now refer to Buildmeister gsheet</li> <li>Each rotation should be confirmed by a 'handshake' between the outgoing     Buildmeister and the new one in the related Telegram chat</li> <li>Buildmeister is responsible for:</li> <li>Pushing team members to fix broken tests</li> <li>Conducting post-mortem analysis<ul> <li>Why did the break happen?</li> <li>What can we avoid the problem, especially through process and automation</li> </ul> </li> <li>Testing workflows are available via github actions:</li> <li>Testing workflows that need to be checked:<ul> <li>cmamp:</li> <li>Fast tests</li> <li>Slow tests</li> <li>dev_tools:</li> <li>Fast tests</li> <li>Slow tests</li> </ul> </li> <li>Refer to .github dir in the repo for update schedule of GH actions</li> <li>Additional information about the tests and gdoc</li> </ul>"},{"location":"Buildmeister_process/#notification-system","title":"Notification system","text":"<ul> <li><code>@CK_cmamp_buildbot</code> notifies the team about breaks via Telegram channel <code>CK build notifications</code></li> <li>A notification contains:</li> <li>Failing tests type: fast/slow/super-slow</li> <li>Repo</li> <li>Branch</li> <li>Event</li> <li>Link to a failing run</li> </ul> <p>Example: - </p>"},{"location":"Buildmeister_process/#buildmeister-instructions","title":"Buildmeister instructions","text":"<ul> <li>You receive a break notification from <code>@CK_cmamp_buildbot</code></li> <li>Have a look at the message</li> <li>Do it right away, this is always your highest priority task</li> <li> <p>Notify the team</p> </li> <li> <p>Post on the <code>CK build notifications</code> Telegram channel what tests broke, e.g., <code>FAILED knowledge_graph/vendors/test/test_utils.py::TestClean::test_clean</code></p> </li> <li>If unsure about the cause of failure (chance that failure is temporary):<ul> <li>Do a quick run locally for failed test</li> <li>If test is specific and can not be run locally, rerun the regressions</li> </ul> </li> <li>Ask if somebody knows what is the problem<ul> <li>If you know who is in charge of that test (you can use <code>git blame</code>) ask     directly</li> </ul> </li> <li>If the offender says that it's fixing the bug right away, let him / her do it</li> <li> <p>Otherwise file a bug to track the issue</p> </li> <li> <p>File an Issue in GH / ZH to report the failing tests and the errors</p> </li> <li>Example: https://app.zenhub.com/workspaces/cm-615371012ed326001e044788/issues/alphamatic/dev_tools/318</li> <li>Issue title template <code>Build fail - {repo} {test type} ({run number})</code><ul> <li>Example: <code>Build fail - Cmamp fast_tests (1442077107)</code></li> </ul> </li> <li>Paste the URL of the failing run<ul> <li>Example: https://github.com/alphamatic/dev_tools/actions/runs/1497955663</li> </ul> </li> <li>Provide as much information as possible to give an understanding of the     problem</li> <li>List all the tests with FAILED status in a github run, e.g.,  </li> </ul> <pre><code>        FAILED knowledge_graph/vendors/test/test_p1_utils.py::TestClean::test_clean\n        FAILED knowledge_graph/vendors/nbsc/test/test_nbsc_utils.py::TestExposeNBSCMetadata::test_expose_nbsc_metadata\n</code></pre> <ul> <li>Stack trace or part of it (if it's too large)</li> </ul> <pre><code>        Traceback (most recent call last): File\n        \"/.../automl/hypotheses/test/test*rh_generator.py\", line 104, in test1\n        kg_metadata, * = p1ut.load_release(version=\"0.5.2\") File\n        \"/.../knowledge_graph/vendors/utils.py\", line 53, in load_release % version,\n        File \"/.../amp/helpers/dbg.py\", line 335, in dassert_dir_exists \\_dfatal(txt,\n        msg, \\*args) File \"/.../amp/helpers/dbg.py\", line 97, in \\_dfatal\n        dfatal(dfatal_txt) File \"/.../amp/helpers/dbg.py\", line 48, in dfatal raise\n        assertion_type(ret) AssertionError:\n        ##############################################################################\n        * Failed assertion * dir='/fsx/research/data/kg/releases/timeseries_db/v0.5.2'\n        doesn't exist or it's not a dir The requested version 0.5.2 has no directory\n        associated with it.\n</code></pre> <ul> <li>Add the issue to the     BUILD - Breaks Epic so that we can track it</li> <li>If the failures are not connected to each other, file separate issues for each     of the potential root cause</li> <li> <p>Keep issues grouped according to the codebase organization</p> </li> <li> <p>Post the issue reference on Telegram channel CK build notifications</p> </li> <li>You can quickly discuss there who will take care of the broken tests, assign     that person</li> <li>You can use <code>git blame</code> to see who wrote the test</li> <li> <p>Otherwise, assign it to the person who can reroute</p> </li> <li> <p>Our policy is \"fix it or revert\"</p> </li> <li> <p>The build needs to go back to green within 1 hr</p> <ul> <li>Either the person responsible for the break fixes the bug within 1 hour</li> <li>Or you need to push the responsible person to disable the test</li> <li>Do not make the decision about disabling the test yourself!</li> <li>First, check with the responsible person, and if he / she is ok with   disabling, do it</li> <li>NB! Disabling the test is not the first choice, it's a measure of last   resort!</li> </ul> </li> <li> <p>Regularly check issues that belong to the Epic BUILD - Breaks.</p> </li> <li>You have to update the break issues if the problem was solved or partially     solved.</li> <li> <p>Pay special attention to the failures which resulted in disabling tests</p> </li> <li> <p>When your time of the Buildmeister duties is over, confirm the rotation with   the next responsible person in the related Telegram chat.</p> </li> </ul>"},{"location":"Buildmeister_process/#update_amp_submodule-fails","title":"<code>update_amp_submodule</code> fails","text":"<ul> <li> <p>When this happens, the first thing to do is attempt to update the <code>amp</code>   pointer manually</p> </li> <li> <p>Instructions:</p> </li> </ul> <pre><code>        &gt; cd src/dev_tools1 \n        &gt; git checkout master \n        &gt; git pull --recurse-submodules \n        &gt; cd amp \n        &gt; git checkout master \n        &gt; git pull origin master \n        &gt; cd .. \n        &gt; git add \"amp\" \n        &gt; git commit -m \"Update amp pointer\"\n</code></pre> <p>There is also an invoke target <code>git_roll_amp_forward</code> that does an equivalent operation</p>"},{"location":"Buildmeister_process/#post-mortem-analysis-tbd","title":"Post-mortem analysis (TBD)","text":"<ul> <li>We want to understand on why builds are broken so that we can improve the   system to make it more robust</li> <li>In order to do that, we need to understand the failure modes of the system</li> <li> <p>For this reason we keep a log of all the issues and what was the root cause</p> </li> <li> <p>After each break fill the   Buildmeister spreadsheet sheet \"Post-mortem breaks analysis\"</p> </li> <li> <p><code>Date</code> column:</p> </li> <li>Enter the date when the break took place</li> <li> <p>Keep the bug ordered in reverse chronological order (i.e., most recent dates     first)</p> </li> <li> <p><code>Repo</code> column:</p> </li> <li> <p>Specify the repo where break occurred</p> <ul> <li><code>amp</code></li> <li>...</li> </ul> </li> <li> <p><code>Test type</code> column:</p> </li> <li> <p>Specify the type of the failing tests</p> <ul> <li>Fast</li> <li>Slow</li> <li>Super-slow</li> </ul> </li> <li> <p><code>Link</code> column:</p> </li> <li> <p>Provide a link to a failing run</p> </li> <li> <p><code>Reason</code> column:</p> </li> <li> <p>Specify the reason of the break</p> <ul> <li>Merged a branch with broken tests</li> <li>Master was not merged in a branch</li> <li>Merged broken slow tests without knowing that</li> <li>Underlying data changed</li> </ul> </li> <li> <p><code>Issue</code> column:</p> </li> <li> <p>Provide the link to the ZH issue with the break description</p> </li> <li> <p><code>Solution</code> column:</p> </li> <li>Provide the solution description of the problem<ul> <li>Problem that led to the break was solved</li> <li>Failing tests were disabled, i.e. problem was not solved</li> </ul> </li> </ul>"},{"location":"Code_review%20copy/","title":"Code review","text":"<ul> <li>General rules about code review</li> <li>Read the Google code review best practices</li> <li>Code review workflows</li> <li>Pull request</li> <li>From the code author point of view</li> <li>Why we review code</li> <li>PR checklist</li> <li>The golden rule of code review</li> <li>Be clear in the PR request about what you want</li> <li>Do not mix changes and refactoring / shuffling code</li> <li>Double check before sending a PR</li> <li>Reviewing other people's code is usually not fun</li> <li>The first reviews are painful</li> <li>Apply review comments everywhere</li> <li>Look at the code top-to-bottom</li> <li>Answering comments after a review</li> <li>Apply changes to a review quickly</li> <li>Ask for another review</li> <li>Workflow of a review in terms of GH labels</li> <li>Link PR to GH issue</li> <li>Fix later</li> <li>From the code reviewer point of view</li> <li>Post-commit review</li> <li>Code walk-through</li> <li>Close the PR and delete the branch</li> <li>Give priority to code review</li> <li>Multiple reviewers problem</li> <li>Remember \"small steps ahead\"</li> <li>Nothing is too small</li> <li>Final GH comment</li> </ul>"},{"location":"Code_review%20copy/#general-rules-about-code-review","title":"General rules about code review","text":""},{"location":"Code_review%20copy/#read-the-google-code-review-best-practices","title":"Read the Google code review best practices","text":"<ul> <li> <p>From the   developer\\'s perspective</p> </li> <li> <p>From the   reviewer\\'s perspective</p> </li> <li> <p>Where the Google guide says \"CL\", think \"PR\"</p> </li> <li> <p>Read it (several times, if you need to)</p> </li> <li> <p>Think about it</p> </li> <li> <p>Understand the rationale</p> </li> </ul>"},{"location":"Code_review%20copy/#code-review-workflows","title":"Code review workflows","text":""},{"location":"Code_review%20copy/#pull-request","title":"Pull request","text":"<ul> <li>Our usual review process is to work in a branch and create a pull request</li> <li>See the     Git     notes for details</li> <li>The name of the pull request is generated with ghi_show.py and looks like     PTask2704 make exchange contracts get contracts applicable to series</li> </ul>"},{"location":"Code_review%20copy/#from-the-code-author-point-of-view","title":"From the code author point of view","text":""},{"location":"Code_review%20copy/#why-we-review-code","title":"Why we review code","text":"<ul> <li>We spend time reviewing each other code so that we can:</li> <li>Build a better product, by letting other people look for bugs</li> <li>Propagate knowledge of the code base through the team</li> <li>Learn from each other</li> </ul>"},{"location":"Code_review%20copy/#pr-checklist","title":"PR checklist","text":"<ul> <li> <p>From   Google reviewer checklist:</p> </li> <li> <p>In asking (and doing) a code review, you should make sure that:</p> </li> <li>The code is well-designed.</li> <li>The functionality is good for the users of the code.</li> <li>The code isn't more complex than it needs to be.</li> <li>The developer isn't implementing things they might need in the future but     don't know they need now.</li> <li>Code has appropriate unit tests.</li> <li>Tests are well-designed.</li> <li>The developer used clear names for everything.</li> <li>Comments are clear and useful, and mostly explain why instead of what.</li> <li>Code is appropriately documented.</li> <li>The code conforms to our style guides.</li> </ul>"},{"location":"Code_review%20copy/#the-golden-rule-of-code-review","title":"The golden rule of code review","text":"<ul> <li>Make life easy for the reviewers</li> <li> <p>Aka \"Do not upset the reviewers, otherwise they won't let you merge your     code\"</p> </li> <li> <p>Remember that reviewing other people's code is hard and unrewarding work</p> </li> <li> <p>Do your best for not frustrating the reviewers</p> </li> <li> <p>If you are in doubt \"it's probably clear, although I am not 100% sure\", err on   giving more information and answer potential questions</p> </li> </ul>"},{"location":"Code_review%20copy/#be-clear-in-the-pr-request-about-what-you-want","title":"Be clear in the PR request about what you want","text":"<ul> <li>Summarize what was done in the PR</li> <li>Refer to the GH task, but the task alone might not be sufficient</li> <li> <p>A PR can implement only part of a complex task</p> <ul> <li>Which part is it implementing?</li> <li>Why is it doing it in a certain way?</li> </ul> </li> <li> <p>If the code is not ready for merge, but you want a \"pre-review\" convert PR to a draft</p> </li> <li>E.g., ask for an architectural review</li> <li> <p>Draft PRs can not be merged</p> </li> <li> <p>Is it blocking?</p> </li> <li>Do not abuse asking for a quick review</li> <li>All code is important and we do our best to review code quickly and     carefully</li> <li>If it\\'s blocking a ping on IM is a good idea</li> </ul>"},{"location":"Code_review%20copy/#do-not-mix-changes-and-refactoring-shuffling-code","title":"Do not mix changes and refactoring / shuffling code","text":"<ul> <li>The job of the reviewers become frustrating when the author mixes:</li> <li>Refactoring / moving code; and</li> <li> <p>Changes</p> </li> <li> <p>It is time consuming or impossible for a reviewer to understand what happened:</p> </li> <li>What is exactly changed?</li> <li> <p>What was moved where?</p> </li> <li> <p>In those cases reviewers have the right to ask the PR to be broken in pieces</p> </li> <li> <p>One approach for the PR author is to:</p> </li> <li>Do a quick PR to move code around (e.g., refactoring) or purely cosmetic<ul> <li>You can ask the reviewer to take a quick look</li> </ul> </li> <li> <p>Do the next PRs with the actual changes</p> </li> <li> <p>Another approach is to develop in a branch and break the code into PRs as the   code firms up</p> </li> <li>In this case you need to be very organized and be fluent in using Git: both     qualities are expected of you</li> <li>E.g., develop in a branch (e.g., <code>gp_scratch</code>)</li> <li>Create a branch from it (e.g., <code>TaskXYZ_do_this_and_that</code>) or copy the files     from <code>gp_scratch</code> to <code>TaskXYZ_do_this_and_that</code></li> <li>Edit the files to make the PR self-consistent</li> <li>Do a PR for <code>TaskXYZ_do_this_and_that</code></li> <li>Keep working in gp_scratch while the review is moving forward</li> <li>Make changes to the <code>TaskXYZ_do_this_and_that</code> as requested</li> <li>Merge <code>TaskXYZ_do_this_and_that</code> to master</li> <li>Merge <code>master</code> back into <code>gp_scratch</code> and keep moving</li> </ul>"},{"location":"Code_review%20copy/#double-check-before-sending-a-pr","title":"Double check before sending a PR","text":"<ul> <li>After creating a PR take a look at it to make sure things look good, e.g.,</li> <li>Are there merge problems?</li> <li>Did you forget some file?</li> <li>Skim through the PR to make sure that people can understand what you changed</li> </ul>"},{"location":"Code_review%20copy/#reviewing-other-peoples-code-is-usually-not-fun","title":"Reviewing other people's code is usually not fun","text":"<ul> <li>Reviewing code is time-consuming and tedious</li> <li>So do everything you can to make the reviewer's job easier</li> <li> <p>Don't cut corners</p> </li> <li> <p>If a reviewer is confused about something, other readers (including you in 1   year) likely would be too</p> </li> <li>What is obvious to you as the author is often not obvious to readers</li> <li>Readability is paramount</li> <li>You should abhor write-only code</li> </ul>"},{"location":"Code_review%20copy/#the-first-reviews-are-painful","title":"The first reviews are painful","text":"<ul> <li>One needs to work on the same code over and over</li> <li> <p>Just think about the fact that the reviewer is also reading (still crappy)     code over and over</p> </li> <li> <p>Unfortunately it is needed pain to get to the quality of code we need to make   progress as a team</p> </li> </ul>"},{"location":"Code_review%20copy/#apply-review-comments-everywhere","title":"Apply review comments everywhere","text":"<ul> <li> <p>Apply a review comment everywhere, not just where the reviewer pointed out the   issue</p> </li> <li> <p>E.g., reviewer says:</p> </li> <li>\"Please replace <code>_LOG.warning(\"Hello %s\".format(name))</code> with <code>_LOG.warning(\"Hello %s\", name)</code>\"</li> <li>You are expected to do this replacement:</li> <li>In the current review</li> <li>In all future code you write</li> <li>In old code, as you come across it in the course of your work<ul> <li>Of course don't start modifying the old code in this review, but open a   clean-up bug, if you need a reminder</li> </ul> </li> </ul>"},{"location":"Code_review%20copy/#look-at-the-code-top-to-bottom","title":"Look at the code top-to-bottom","text":"<ul> <li>E.g., if you do a search &amp; replace, make sure everything is fine</li> </ul>"},{"location":"Code_review%20copy/#answering-comments-after-a-review","title":"Answering comments after a review","text":"<ul> <li>It's better to answer comments in chunks so we don't get an email per comment</li> <li>Use \"start a review\" (not in conversation)</li> <li>If one of the comment is urgent (e.g., other comments depend on this) you can   send it as single comment</li> <li>When you answer a comment, mark it as resolved</li> </ul>"},{"location":"Code_review%20copy/#apply-changes-to-a-review-quickly","title":"Apply changes to a review quickly","text":"<ul> <li>In the same way the reviewers are expected to review PRs within 24 hours, the   author of a PR is expected to apply the requested changes quickly, ideally in   few hours</li> <li> <p>If it takes longer, then either the PR was too big or the quality of the PR     was too low</p> </li> <li> <p>If it takes too long to apply the changes:</p> </li> <li>The reviewers (and the authors) might forget what is the context of the     requested changes</li> <li>It becomes more difficult (or even impossible) to merge, since the code base     is continuously changing</li> <li>It creates dependencies among your PRs</li> <li>Remember that you should not be adding more code to the same PR, but only     fix the problems and then open a PR with new code</li> <li>Other people that rely on your code are blocked</li> </ul>"},{"location":"Code_review%20copy/#ask-for-another-review","title":"Ask for another review","text":"<ul> <li>Once you are done with resolving all the comments ask for another review</li> </ul>"},{"location":"Code_review%20copy/#workflow-of-a-review-in-terms-of-gh-labels","title":"Workflow of a review in terms of GH labels","text":"<ul> <li>The current meaning of the labels are:</li> <li>See GitHub ZenHub workflows doc</li> </ul>"},{"location":"Code_review%20copy/#link-pr-to-gh-issue","title":"Link PR to GH issue","text":"<ul> <li>Mention the corresponding issue in the PR description to ease the navigation E.g., see an example</li> </ul>"},{"location":"Code_review%20copy/#fix-later","title":"Fix later","text":"<ul> <li> <p>It's ok for an author to file a follow up Issue (e.g., with a clean up), by   pointing the new Issue to the comments to address, and move on with merge</p> </li> <li> <p>The Issue needs to be addressed immediately after</p> </li> </ul>"},{"location":"Code_review%20copy/#from-the-code-reviewer-point-of-view","title":"From the code reviewer point of view","text":""},{"location":"Code_review%20copy/#post-commit-review","title":"Post-commit review","text":"<ul> <li> <p>You can comment on a PR already merged</p> </li> <li> <p>You can comment on the relevant lines in a commit straight to <code>master</code> (this   is the exception)</p> </li> </ul>"},{"location":"Code_review%20copy/#code-walk-through","title":"Code walk-through","text":"<ul> <li>It is best to create a branch with the files you want to review</li> <li>Add TODOs in the code (so that the PR will pick up those sections)</li> <li> <p>File bugs for the more involved changes</p> </li> <li> <p>Try to get a top to bottom review of a component once every N weeks (N = 2, 3)</p> </li> <li>Sometimes the structure of the</li> </ul>"},{"location":"Code_review%20copy/#close-the-pr-and-delete-the-branch","title":"Close the PR and delete the branch","text":"<ul> <li> <p>When code is merged into master by one of the reviewers through the UI one can   select the delete branch option</p> </li> <li> <p>Otherwise you can delete the branch using the procedure in  Git</p> </li> </ul>"},{"location":"Code_review%20copy/#give-priority-to-code-review","title":"Give priority to code review","text":"<ul> <li>We target to give feedback on a PR within 24hr so that the author is not   blocked for too long</li> <li>Usually we respond in few hours</li> </ul>"},{"location":"Code_review%20copy/#multiple-reviewers-problem","title":"Multiple reviewers problem","text":"<ul> <li> <p>When there are multiple reviewers for the same PR there can be some problem</p> </li> <li> <p>Ok to keep moving fast and avoid blocking</p> </li> <li> <p>Block only if it is controversial</p> </li> <li> <p>Merge when we are confident that the other is ok</p> </li> <li>The other can catch up with post-commit review</li> <li>A good approach is to monitor recently merged PRs in GH to catch up</li> </ul>"},{"location":"Code_review%20copy/#remember-small-steps-ahead","title":"Remember \"small steps ahead\"","text":"<ul> <li>Follow the Google approach of merging a PR that is a strict improvement.</li> </ul>"},{"location":"Code_review%20copy/#nothing-is-too-small","title":"Nothing is too small","text":"<ul> <li> <p>Each reviewer reviews the code pointing out everything that can be a problem</p> </li> <li> <p>Problems are highlighted even if small or controversial</p> </li> <li> <p>Not all of those comments might not be implemented by the author</p> </li> <li> <p>Of course if different approaches are really equivalent but reviewers have   their own stylistic preference, this should not be pointed, unless it's a   matter of consistency or leave the choice to the author</p> </li> </ul>"},{"location":"Code_review%20copy/#final-gh-comment","title":"Final GH comment","text":"<ul> <li>Once you are done with the detailed review of the code, you need to</li> <li>Write a short comment</li> <li> <p>Decide what is the next step for the PR, e.g.,</p> <ul> <li>Comment</li> <li>Submit general feedback without explicit approval</li> <li>Approve</li> <li>Submit feedback and approve merging these changes</li> <li>Request changes</li> <li>Submit feedback that must be addressed before merging</li> </ul> </li> <li> <p>We use an integrator / developer manager workflow, initially with Paul and GP   testing and merging most of the PRs</p> </li> <li> <p>We use the 3 possible options in the following way:</p> </li> <li>Comment<ul> <li>When reviewers want the changes to be applies and then look at the   resulting changes to decide the next steps</li> <li>In practice this means \"make the changes and then we'll discuss more\"</li> <li>E.g., this is of course the right choice for a pre-PR</li> </ul> </li> <li>Approve<ul> <li>No more changes: time to merge!</li> <li>Often it is accompanied with the comment \"LGMT\" (Looks Good To Me)</li> </ul> </li> <li>Request changes<ul> <li>This typically means \"if you address the comments we can merge\"</li> <li>In practice this is more or less equivalent to \"Comment\"</li> </ul> </li> </ul>"}]}